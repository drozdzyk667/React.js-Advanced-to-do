{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","draft","taskType","taskColor","backgroundColor","AddActive","priority","dateNow","date","fullDate","minimumDate","maximumDate","tasks","id","name","deadlineTask","type","devTasks","verifyTasks","done","doneAt","currentTime","Date","year","getFullYear","month","getMonth","day","getDay","time","toLocaleString","hour","minute","hour12","concat","_this","setState","handleClearAll","e","target","Object","defineProperty","handleInput","value","handlePriority","handleAddTask","toConsumableArray","Math","random","length","sort","sortToDoTasks","reverse","handlePushToDo","forEach","task","index","findIndex","passedTime","splice","handlePushDev","handlePushVerify","property","sortOrder","substr","a","b","handleDeleteToDo","handleDeleteDone","tasksDone","handleDate","handleSelect","this","_this2","console","log","map","react_default","createElement","App_Task","key","delete","App_DevTasks","App_VerifiedTasks","App_TaskDone","deleteDone","className","htmlFor","onChange","maxLength","placeholder","checked","onClick","style","color","min","max","margin","borderRight","visibility","display","Component","Task","props","toUpperCase","DevTasks","VerifiedTasks","TaskDone","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QAGMA,oNACJC,MAAQ,CACNC,MAAO,GACPC,SAAU,SACVC,UAAW,CAAEC,gBAAiB,WAC9BC,WAAW,EACXC,UAAU,EACVC,QAAS,KACTC,KAAM,GACNC,SAAU,KACVC,YAAa,KACbC,YAAa,KACbC,MAAO,CACL,CACEC,GAAI,EACJC,KAAM,YACNR,UAAU,EACVS,aAAc,aACdC,KAAM,OACNb,UAAW,CAAEC,gBAAiB,YAEhC,CACES,GAAI,EACJC,KAAM,aACNR,UAAU,EACVS,aAAc,aACdC,KAAM,MACNb,UAAW,CAAEC,gBAAiB,aAGlCa,SAAU,GACVC,YAAa,GACbC,KAAM,CACJ,CACEN,GAAI,EACJC,KAAM,cACNR,UAAU,EACVc,OAAQ,uBACRJ,KAAM,OACNb,UAAW,CAAEC,gBAAiB,gBASpCiB,YAAc,WACZ,IAAMb,EAAO,IAAIc,KACXC,EAAOf,EAAKgB,cACdC,EAAQjB,EAAKkB,WAAa,EAC1BC,EAAMnB,EAAKoB,SAETC,EAAOrB,EAAKsB,eAAe,QAAS,CACxCC,KAAM,UACNC,OAAQ,UACRC,QAAQ,IAGNR,EAAQ,KACVA,EAAK,IAAAS,OAAOT,IAGVE,EAAM,KACRA,EAAG,IAAAO,OAAOP,IAGZQ,EAAKC,SAAS,CACZ7B,QAAO,GAAA2B,OAAKX,EAAL,KAAAW,OAAaT,EAAb,KAAAS,OAAsBP,GAC7BnB,KAAI,GAAA0B,OAAKX,EAAL,KAAAW,OAAaT,EAAb,KAAAS,OAAsBP,GAC1BjB,YAAW,GAAAwB,OAAKX,EAAL,KAAAW,OAAaT,EAAb,KAAAS,OAAsBP,GACjChB,YAAW,GAAAuB,OAAKX,EAAO,EAAZ,KAAAW,OAAiBT,EAAjB,KAAAS,OAA0BP,GACrClB,SAAQ,GAAAyB,OAAKX,EAAL,KAAAW,OAAaT,EAAb,KAAAS,OAAsBP,EAAtB,MAAAO,OAA8BL,QAI1CQ,eAAiB,SAAAC,GACf,IAAMzB,EAAKyB,EAAEC,OAAO1B,GACT,UAAPA,EACFsB,EAAKC,SAALI,OAAAC,EAAA,EAAAD,CAAA,GACG3B,EAAK,KAEQ,SAAPA,GACTsB,EAAKC,SAALI,OAAAC,EAAA,EAAAD,CAAA,GACG3B,EAAK,QAKZ6B,YAAc,SAAAJ,GACZH,EAAKC,SAALI,OAAAC,EAAA,EAAAD,CAAA,GACGF,EAAEC,OAAOzB,KAAOwB,EAAEC,OAAOI,WAI9BC,eAAiB,WACfT,EAAKC,SAAS,CACZ9B,UAAW6B,EAAKnC,MAAMM,cAI1BuC,cAAgB,WACd,IAAMjC,EAAQ,GAAAsB,OAAAM,OAAAM,EAAA,EAAAN,CACTL,EAAKnC,MAAMY,OADF,CAEZ,CACEC,GAAIkC,KAAKC,SAAWb,EAAKnC,MAAMY,MAAMqC,OACrCnC,KAAMqB,EAAKnC,MAAMC,MACjBK,SAAU6B,EAAKnC,MAAMM,SACrBS,aAAcoB,EAAKnC,MAAMQ,KACzBQ,KAAMmB,EAAKnC,MAAME,SACjBC,UAAWgC,EAAKnC,MAAMG,aAGvB+C,KAAKf,EAAKgB,cAAc,aACxBD,KAAKf,EAAKgB,cAAc,SAEF,KAArBhB,EAAKnC,MAAMC,MACbkC,EAAKC,SAAS,CACZxB,MAAOA,EAAMwC,UACbnD,MAAO,GACPK,UAAU,EACVE,KAAM2B,EAAKnC,MAAMO,QACjBL,SAAU,SACVC,UAAW,CAAEC,gBAAiB,WAC9BC,WAAW,IAGb8B,EAAKC,SAAS,CACZ/B,WAAW,OAKjBgD,eAAiB,SAAAxC,GACf,IAAMD,EAAK4B,OAAAM,EAAA,EAAAN,CAAOL,EAAKnC,MAAMY,OAC7BA,EAAM0C,QAAQ,SAAAC,GACZ,GAAIA,EAAK1C,KAAOA,EAAI,CAClB,IAAM2C,EAAQ5C,EAAM6C,UAAU,SAAAF,GAAI,OAAIA,EAAK1C,KAAOA,IAClDsB,EAAKC,SAAS,CACZxB,MAAOA,EACPK,SAAQ,GAAAiB,OAAAM,OAAAM,EAAA,EAAAN,CACHL,EAAKnC,MAAMiB,UADR,CAEN,CACEJ,GAAIkC,KAAKC,SAAWb,EAAKnC,MAAMiB,SAASgC,OACxCnC,KAAMF,EAAM4C,GAAO1C,KACnBR,SAAUM,EAAM4C,GAAOlD,SACvBoD,WAAYvB,EAAKnC,MAAMS,SACvBO,KAAMJ,EAAM4C,GAAOxC,KACnBb,UAAWS,EAAM4C,GAAOrD,eAK9BS,EAAM+C,OAAOH,EAAO,SAK1BI,cAAgB,SAAA/C,GACd,IAAMD,EAAK4B,OAAAM,EAAA,EAAAN,CAAOL,EAAKnC,MAAMiB,UAE7BL,EAAM0C,QAAQ,SAAAC,GACZ,GAAIA,EAAK1C,KAAOA,EAAI,CAClB,IAAM2C,EAAQ5C,EAAM6C,UAAU,SAAAF,GAAI,OAAIA,EAAK1C,KAAOA,IAElDsB,EAAKC,SAAS,CACZnB,SAAUL,EACVM,YAAW,GAAAgB,OAAAM,OAAAM,EAAA,EAAAN,CACNL,EAAKnC,MAAMkB,aADL,CAET,CACEL,GAAIkC,KAAKC,SAAWb,EAAKnC,MAAMkB,YAAY+B,OAC3CnC,KAAMF,EAAM4C,GAAO1C,KACnBR,SAAUM,EAAM4C,GAAOlD,SACvBoD,WAAYvB,EAAKnC,MAAMS,SACvBO,KAAMJ,EAAM4C,GAAOxC,KACnBb,UAAWS,EAAM4C,GAAOrD,eAI9BS,EAAM+C,OAAOH,EAAO,SAK1BK,iBAAmB,SAAAhD,GACjB,IAAMD,EAAK4B,OAAAM,EAAA,EAAAN,CAAOL,EAAKnC,MAAMkB,aAE7BN,EAAM0C,QAAQ,SAAAC,GACZ,GAAIA,EAAK1C,KAAOA,EAAI,CAClB,IAAM2C,EAAQ5C,EAAM6C,UAAU,SAAAF,GAAI,OAAIA,EAAK1C,KAAOA,IAClDsB,EAAKC,SAAS,CACZlB,YAAaN,EACbO,KAAI,GAAAe,OAAAM,OAAAM,EAAA,EAAAN,CACCL,EAAKnC,MAAMmB,MADZ,CAEF,CACEN,GAAIkC,KAAKC,SAAWb,EAAKnC,MAAMmB,KAAK8B,OACpCnC,KAAMF,EAAM4C,GAAO1C,KACnBR,SAAUM,EAAM4C,GAAOlD,SACvBc,OAAQe,EAAKnC,MAAMS,SACnBO,KAAMJ,EAAM4C,GAAOxC,KACnBb,UAAWS,EAAM4C,GAAOrD,eAI9BS,EAAM+C,OAAOH,EAAO,SAK1BL,cAAgB,SAAAW,GACd,IAAIC,EAAY,EAKhB,MAJoB,MAAhBD,EAAS,KACXC,GAAa,EACbD,EAAWA,EAASE,OAAO,IAEtB,SAACC,EAAGC,GAGT,OADED,EAAEH,GAAYI,EAAEJ,IAAa,EAAIG,EAAEH,GAAYI,EAAEJ,GAAY,EAAI,GACnDC,MAIpBI,iBAAmB,SAAAtD,GACjB,IAAMD,EAAK4B,OAAAM,EAAA,EAAAN,CAAOL,EAAKnC,MAAMY,OACvB4C,EAAQ5C,EAAM6C,UAAU,SAAAF,GAAI,OAAIA,EAAK1C,KAAOA,IAClDD,EAAM+C,OAAOH,EAAO,GACpBrB,EAAKC,SAAS,CACZxB,aAIJwD,iBAAmB,SAAAvD,GACjB,IAAMwD,EAAS7B,OAAAM,EAAA,EAAAN,CAAOL,EAAKnC,MAAMmB,MAC3BqC,EAAQa,EAAUZ,UAAU,SAAAF,GAAI,OAAIA,EAAK1C,KAAOA,IACtDwD,EAAUV,OAAOH,EAAO,GACxBrB,EAAKC,SAAS,CACZjB,KAAMkD,OAIVC,WAAa,SAAAhC,GACXH,EAAKC,SAAS,CACZ5B,KAAM8B,EAAEC,OAAOI,WAInB4B,aAAe,SAAAjC,GAKb,OAJAH,EAAKC,SAAS,CACZlC,SAAUoC,EAAEC,OAAOI,QAGbL,EAAEC,OAAOI,OACf,IAAK,SACH,OAAOR,EAAKC,SAAS,CACnBjC,UAAW,CAAEC,gBAAiB,aAElC,IAAK,OACH,OAAO+B,EAAKC,SAAS,CACnBjC,UAAW,CAAEC,gBAAiB,aAElC,IAAK,OACH,OAAO+B,EAAKC,SAAS,CACnBjC,UAAW,CAAEC,gBAAiB,aAElC,IAAK,MACH,OAAO+B,EAAKC,SAAS,CACnBjC,UAAW,CAAEC,gBAAiB,aAElC,IAAK,OACH,OAAO+B,EAAKC,SAAS,CACnBjC,UAAW,CAAEC,gBAAiB,aAElC,IAAK,SACH,OAAO+B,EAAKC,SAAS,CACnBjC,UAAW,CAAEC,gBAAiB,aAElC,IAAK,SACH,OAAO+B,EAAKC,SAAS,CACnBjC,UAAW,CAAEC,gBAAiB,aAElC,QACE,OAAO+B,EAAKC,SAAS,CACnBjC,UAAW,CAAEC,gBAAiB,gGA9OpCoE,KAAKnD,+CAmPE,IAAAoD,EAAAD,KACPE,QAAQC,IAAIH,KAAKxE,MAAME,UACvBwE,QAAQC,IAAIH,KAAKxE,MAAMG,WAEvB,IAAMS,EAAQ4D,KAAKxE,MAAMY,MAAMgE,IAAI,SAAArB,GAAI,OACrCsB,EAAAZ,EAAAa,cAACC,EAAD,CACE5E,UAAWoD,EAAKpD,UAChBD,SAAUqD,EAAKvC,KACfR,KAAM+C,EAAKxC,aACXT,SAAUiD,EAAKjD,SACf0E,IAAKzB,EAAK1C,GACVC,KAAMyC,EAAKzC,KACXmE,OAAQ,kBAAMR,EAAKN,iBAAiBZ,EAAK1C,KACzCM,KAAM,kBAAMsD,EAAKpB,eAAeE,EAAK1C,SAInCI,EAAWuD,KAAKxE,MAAMiB,SAAS2D,IAAI,SAAArB,GAAI,OAC3CsB,EAAAZ,EAAAa,cAACI,EAAD,CACE/E,UAAWoD,EAAKpD,UAChBD,SAAUqD,EAAKvC,KACfR,KAAM+C,EAAKG,WACXpD,SAAUiD,EAAKjD,SACfc,OAAQmC,EAAKnC,OACb4D,IAAKzB,EAAK1C,GACVC,KAAMyC,EAAKzC,KACXK,KAAM,kBAAMsD,EAAKb,cAAcL,EAAK1C,SAIlCK,EAAcsD,KAAKxE,MAAMkB,YAAY0D,IAAI,SAAArB,GAAI,OACjDsB,EAAAZ,EAAAa,cAACK,EAAD,CACEhF,UAAWoD,EAAKpD,UAChBD,SAAUqD,EAAKvC,KACfR,KAAM+C,EAAKG,WACXpD,SAAUiD,EAAKjD,SACfc,OAAQmC,EAAKnC,OACb4D,IAAKzB,EAAK1C,GACVC,KAAMyC,EAAKzC,KACXK,KAAM,kBAAMsD,EAAKZ,iBAAiBN,EAAK1C,SAIrCwD,EAAYG,KAAKxE,MAAMmB,KAAKyD,IAAI,SAAArB,GAAI,OACxCsB,EAAAZ,EAAAa,cAACM,EAAD,CACEjF,UAAWoD,EAAKpD,UAChBD,SAAUqD,EAAKvC,KACfR,KAAM+C,EAAKnC,OACXd,SAAUiD,EAAKjD,SACfc,OAAQmC,EAAKnC,OACb4D,IAAKzB,EAAK1C,GACVC,KAAMyC,EAAKzC,KACXuE,WAAY,kBAAMZ,EAAKL,iBAAiBb,EAAK1C,SAIjD,OACEgE,EAAAZ,EAAAa,cAAA,OAAKQ,UAAU,OACbT,EAAAZ,EAAAa,cAAA,OAAKQ,UAAU,aACbT,EAAAZ,EAAAa,cAAA,OAAKQ,UAAU,cACbT,EAAAZ,EAAAa,cAAA,SAAOS,QAAQ,MAAMD,UAAU,OAC7BT,EAAAZ,EAAAa,cAAA,SACEjE,GAAG,MACHG,KAAK,OACLF,KAAK,QACL6B,MAAO6B,KAAKxE,MAAMC,MAClBuF,SAAUhB,KAAK9B,YACf+C,UAAU,KACVC,YAAY,SAEdb,EAAAZ,EAAAa,cAAA,QAAMQ,UAAU,SAAhB,cACAT,EAAAZ,EAAAa,cAAA,QAAMQ,UAAU,YAGlBT,EAAAZ,EAAAa,cAAA,OAAKQ,UAAU,mBACbT,EAAAZ,EAAAa,cAAA,SAAOS,QAAQ,UACbV,EAAAZ,EAAAa,cAAA,SACE9D,KAAK,WACLH,GAAG,SACH8E,QAASnB,KAAKxE,MAAMM,SACpBkF,SAAUhB,KAAK5B,iBAEjBiC,EAAAZ,EAAAa,cAAA,SAAOS,QAAQ,SACfV,EAAAZ,EAAAa,cAAA,4BAIJD,EAAAZ,EAAAa,cAAA,OAAKQ,UAAU,mBACbT,EAAAZ,EAAAa,cAAA,UACEjE,GAAG,SACHyE,UAAU,kBACVM,QAASpB,KAAK3B,eAHhB,cAOAgC,EAAAZ,EAAAa,cAAA,KAAGe,MAAO,CAAEC,MAAO,QAChBtB,KAAKxE,MAAMK,WAAkC,KAArBmE,KAAKxE,MAAMC,MAAnC,0BAEG,QAKV4E,EAAAZ,EAAAa,cAAA,OAAKQ,UAAU,aACbT,EAAAZ,EAAAa,cAAA,SAAOS,QAAQ,UACbV,EAAAZ,EAAAa,cAAA,wBACAD,EAAAZ,EAAAa,cAAA,UACEe,MAAOrB,KAAKxE,MAAMG,UAClBwC,MAAO6B,KAAKxE,MAAME,SAClBsF,SAAUhB,KAAKD,aACf1D,GAAG,UAEHgE,EAAAZ,EAAAa,cAAA,UAAQnC,MAAM,UAAd,UACAkC,EAAAZ,EAAAa,cAAA,UAAQnC,MAAM,QAAd,QACAkC,EAAAZ,EAAAa,cAAA,UAAQnC,MAAM,QAAd,QACAkC,EAAAZ,EAAAa,cAAA,UAAQnC,MAAM,OAAd,OACAkC,EAAAZ,EAAAa,cAAA,UAAQnC,MAAM,QAAd,QACAkC,EAAAZ,EAAAa,cAAA,UAAQnC,MAAM,UAAd,UACAkC,EAAAZ,EAAAa,cAAA,UAAQnC,MAAM,UAAd,aAKNkC,EAAAZ,EAAAa,cAAA,OAAKQ,UAAU,gBACbT,EAAAZ,EAAAa,cAAA,SAAOS,QAAQ,QACbV,EAAAZ,EAAAa,cAAA,4BACAD,EAAAZ,EAAAa,cAAA,SACEjE,GAAG,OACHG,KAAK,OACL2B,MAAO6B,KAAKxE,MAAMQ,KAClBuF,IAAKvB,KAAKxE,MAAMU,YAChBsF,IAAKxB,KAAKxE,MAAMW,YAChB6E,SAAUhB,KAAKF,gBAKvBO,EAAAZ,EAAAa,cAAA,WAEAD,EAAAZ,EAAAa,cAAA,OAAKQ,UAAU,MAAMO,MAAO,CAAEI,OAAQ,IACpCpB,EAAAZ,EAAAa,cAAA,OAAKQ,UAAU,WAAWO,MAAO,CAAEK,YAAa,oBAC9CrB,EAAAZ,EAAAa,cAAA,OAAKQ,UAAU,mBACbT,EAAAZ,EAAAa,cAAA,oBAAYN,KAAKxE,MAAMY,MAAMqC,OAA7B,KAA2C,IAC3C4B,EAAAZ,EAAAa,cAAA,UACED,EAAAZ,EAAAa,cAAA,+CAEFD,EAAAZ,EAAAa,cAAA,UACEe,MACErB,KAAKxE,MAAMY,MAAMqC,OAAS,EACtB,CAAEkD,WAAY,WACd,CAAEA,WAAY,UAEpBtF,GAAG,QACHyE,UAAU,iBACVM,QAASpB,KAAKnC,gBARhB,cAYAwC,EAAAZ,EAAAa,cAAA,MACEe,MACErB,KAAKxE,MAAMY,MAAMqC,OAAS,EACtB,CAAEmD,QAAS,QACX,CAAEA,QAAS,QAASN,MAAO,QAGjCjB,EAAAZ,EAAAa,cAAA,sCAGJD,EAAAZ,EAAAa,cAAA,OAAKQ,UAAU,uBAAuB1E,IAGxCiE,EAAAZ,EAAAa,cAAA,OAAKQ,UAAU,WAAWO,MAAO,CAAEK,YAAa,oBAC9CrB,EAAAZ,EAAAa,cAAA,OAAKQ,UAAU,mBACbT,EAAAZ,EAAAa,cAAA,kBAAUN,KAAKxE,MAAMiB,SAASgC,OAA9B,KAA4C,IAC5C4B,EAAAZ,EAAAa,cAAA,MACEe,MACErB,KAAKxE,MAAMiB,SAASgC,OAAS,EACzB,CAAEmD,QAAS,QACX,CAAEA,QAAS,QAASN,MAAO,QAGjCjB,EAAAZ,EAAAa,cAAA,2CAGJD,EAAAZ,EAAAa,cAAA,OAAKQ,UAAU,uBAAuBrE,IAGxC4D,EAAAZ,EAAAa,cAAA,OAAKQ,UAAU,WAAWO,MAAO,CAAEK,YAAa,oBAC9CrB,EAAAZ,EAAAa,cAAA,OAAKQ,UAAU,mBACbT,EAAAZ,EAAAa,cAAA,mBAAWN,KAAKxE,MAAMkB,YAAY+B,OAAlC,KAAgD,IAChD4B,EAAAZ,EAAAa,cAAA,MACEe,MACErB,KAAKxE,MAAMkB,YAAY+B,OAAS,EAC5B,CAAEmD,QAAS,QACX,CAAEA,QAAS,QAASN,MAAO,QAGjCjB,EAAAZ,EAAAa,cAAA,0CAGJD,EAAAZ,EAAAa,cAAA,OAAKQ,UAAU,uBAAuBpE,IAGxC2D,EAAAZ,EAAAa,cAAA,OAAKQ,UAAU,YACbT,EAAAZ,EAAAa,cAAA,OAAKQ,UAAU,mBACbT,EAAAZ,EAAAa,cAAA,mBAAWN,KAAKxE,MAAMmB,KAAK8B,OAA3B,KAAyC,IACzC4B,EAAAZ,EAAAa,cAAA,UACEe,MACErB,KAAKxE,MAAMmB,KAAK8B,OAAS,EACrB,CAAEkD,WAAY,WACd,CAAEA,WAAY,UAEpBtF,GAAG,OACHyE,UAAU,iBACVM,QAASpB,KAAKnC,gBARhB,cAYAwC,EAAAZ,EAAAa,cAAA,MACEe,MACErB,KAAKxE,MAAMmB,KAAK8B,OAAS,EACrB,CAAEmD,QAAS,QACX,CAAEA,QAAS,QAASN,MAAO,QAGjCjB,EAAAZ,EAAAa,cAAA,kCAGJD,EAAAZ,EAAAa,cAAA,OAAKQ,UAAU,uBAAuBjB,aApgBhCgC,cA4gBZC,EAAO,SAAAC,GACX,OACE1B,EAAAZ,EAAAa,cAAA,WACED,EAAAZ,EAAAa,cAAA,OAAKQ,UAAU,aAAaO,MAAOU,EAAMpG,WACvC0E,EAAAZ,EAAAa,cAAA,OAAKQ,UAAU,mBACbT,EAAAZ,EAAAa,cAAA,UAAQQ,UAAU,kBAAkBM,QAASW,EAAMpF,MAAnD,UAGA0D,EAAAZ,EAAAa,cAAA,UAAQQ,UAAU,iBAAiBM,QAASW,EAAMtB,QAAlD,WAIFJ,EAAAZ,EAAAa,cAAA,SACED,EAAAZ,EAAAa,cAAA,SAAIyB,EAAMrG,WAEZ2E,EAAAZ,EAAAa,cAAA,MAAIQ,UAAWiB,EAAMjG,SAAW,WAAa,YAC1CiG,EAAMjG,SAAWiG,EAAMzF,KAAK0F,cAAgBD,EAAMzF,KACnD+D,EAAAZ,EAAAa,cAAA,YAEFD,EAAAZ,EAAAa,cAAA,aAAKyB,EAAM/F,KAAN,aAAA0B,OAA0BqE,EAAM/F,MAAS+F,EAAM/F,SAMtDiG,EAAW,SAAAF,GACf,OACE1B,EAAAZ,EAAAa,cAAA,WACED,EAAAZ,EAAAa,cAAA,OAAKQ,UAAU,aAAaO,MAAOU,EAAMpG,WACvC0E,EAAAZ,EAAAa,cAAA,OAAKQ,UAAU,mBACbT,EAAAZ,EAAAa,cAAA,UAAQQ,UAAU,kBAAkBM,QAASW,EAAMpF,MAAnD,WAIF0D,EAAAZ,EAAAa,cAAA,SACED,EAAAZ,EAAAa,cAAA,SAAIyB,EAAMrG,WAEZ2E,EAAAZ,EAAAa,cAAA,MAAIQ,UAAWiB,EAAMjG,SAAW,WAAa,YAC1CiG,EAAMjG,SAAWiG,EAAMzF,KAAK0F,cAAgBD,EAAMzF,KACnD+D,EAAAZ,EAAAa,cAAA,YAEFD,EAAAZ,EAAAa,cAAA,aAAKyB,EAAM/F,KAAN,WAAA0B,OAAwBqE,EAAM/F,MAAS+F,EAAM/F,SAMpDkG,EAAgB,SAAAH,GACpB,OACE1B,EAAAZ,EAAAa,cAAA,WACED,EAAAZ,EAAAa,cAAA,OAAKQ,UAAU,aAAaO,MAAOU,EAAMpG,WACvC0E,EAAAZ,EAAAa,cAAA,OAAKQ,UAAU,mBACbT,EAAAZ,EAAAa,cAAA,UAAQQ,UAAU,kBAAkBM,QAASW,EAAMpF,MAAnD,WAIF0D,EAAAZ,EAAAa,cAAA,SACED,EAAAZ,EAAAa,cAAA,SAAIyB,EAAMrG,WAEZ2E,EAAAZ,EAAAa,cAAA,MAAIQ,UAAWiB,EAAMjG,SAAW,WAAa,YAC1CiG,EAAMjG,SAAWiG,EAAMzF,KAAK0F,cAAgBD,EAAMzF,KACnD+D,EAAAZ,EAAAa,cAAA,YAEFD,EAAAZ,EAAAa,cAAA,aAAKyB,EAAM/F,KAAN,WAAA0B,OAAwBqE,EAAM/F,MAAS+F,EAAM/F,SAMpDmG,EAAW,SAAAJ,GACf,OACE1B,EAAAZ,EAAAa,cAAA,WACED,EAAAZ,EAAAa,cAAA,OAAKQ,UAAU,aAAaO,MAAOU,EAAMpG,WACvC0E,EAAAZ,EAAAa,cAAA,OAAKQ,UAAU,mBACbT,EAAAZ,EAAAa,cAAA,UAAQQ,UAAU,iBAAiBM,QAASW,EAAMlB,YAAlD,WAIFR,EAAAZ,EAAAa,cAAA,SACED,EAAAZ,EAAAa,cAAA,SAAIyB,EAAMrG,WAEZ2E,EAAAZ,EAAAa,cAAA,MAAIQ,UAAWiB,EAAMjG,SAAW,WAAa,YAC1CiG,EAAMjG,SAAWiG,EAAMzF,KAAK0F,cAAgBD,EAAMzF,KACnD+D,EAAAZ,EAAAa,cAAA,YAEFD,EAAAZ,EAAAa,cAAA,aAAKyB,EAAM/F,KAAN,SAAA0B,OAAsBqE,EAAM/F,MAAS+F,EAAM/F,SAMzCT,IC9lBK6G,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrC,EAAAZ,EAAAa,cAACqC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a7a412a9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.scss\";\n\nclass App extends Component {\n  state = {\n    draft: \"\",\n    taskType: \"family\",\n    taskColor: { backgroundColor: \"#57A1C4\" },\n    AddActive: false,\n    priority: false,\n    dateNow: null,\n    date: \"\",\n    fullDate: null,\n    minimumDate: null,\n    maximumDate: null,\n    tasks: [\n      {\n        id: 1,\n        name: \"buy bread\",\n        priority: true,\n        deadlineTask: \"2019-09-10\",\n        type: \"home\",\n        taskColor: { backgroundColor: \"#9370DB\" }\n      },\n      {\n        id: 2,\n        name: \"buy petrol\",\n        priority: false,\n        deadlineTask: \"2019-08-22\",\n        type: \"car\",\n        taskColor: { backgroundColor: \"#92C1FF\" }\n      }\n    ],\n    devTasks: [],\n    verifyTasks: [],\n    done: [\n      {\n        id: 0,\n        name: \"eat pumpkin\",\n        priority: false,\n        doneAt: \"2019-06-22, 11:48 PM\",\n        type: \"home\",\n        taskColor: { backgroundColor: \"#9370DB\" }\n      }\n    ]\n  };\n\n  componentDidMount() {\n    this.currentTime();\n  }\n\n  currentTime = () => {\n    const date = new Date();\n    const year = date.getFullYear();\n    let month = date.getMonth() + 1;\n    let day = date.getDay();\n\n    const time = date.toLocaleString(\"en-US\", {\n      hour: \"numeric\",\n      minute: \"numeric\",\n      hour12: true\n    });\n\n    if (month < 10) {\n      month = `0${month}`;\n    }\n\n    if (day < 10) {\n      day = `0${day}`;\n    }\n\n    this.setState({\n      dateNow: `${year}-${month}-${day}`,\n      date: `${year}-${month}-${day}`,\n      minimumDate: `${year}-${month}-${day}`,\n      maximumDate: `${year + 1}-${month}-${day}`,\n      fullDate: `${year}-${month}-${day}, ${time}`\n    });\n  };\n\n  handleClearAll = e => {\n    const id = e.target.id;\n    if (id === \"tasks\") {\n      this.setState({\n        [id]: []\n      });\n    } else if (id === \"done\") {\n      this.setState({\n        [id]: []\n      });\n    }\n  };\n\n  handleInput = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  handlePriority = () => {\n    this.setState({\n      priority: !this.state.priority\n    });\n  };\n\n  handleAddTask = () => {\n    const tasks = [\n      ...this.state.tasks,\n      {\n        id: Math.random() * this.state.tasks.length,\n        name: this.state.draft,\n        priority: this.state.priority,\n        deadlineTask: this.state.date,\n        type: this.state.taskType,\n        taskColor: this.state.taskColor\n      }\n    ]\n      .sort(this.sortToDoTasks(\"priority\"))\n      .sort(this.sortToDoTasks(\"type\"));\n\n    if (this.state.draft !== \"\") {\n      this.setState({\n        tasks: tasks.reverse(),\n        draft: \"\",\n        priority: false,\n        date: this.state.dateNow,\n        taskType: \"family\",\n        taskColor: { backgroundColor: \"#57A1C4\" },\n        AddActive: false\n      });\n    } else {\n      this.setState({\n        AddActive: true\n      });\n    }\n  };\n\n  handlePushToDo = id => {\n    const tasks = [...this.state.tasks];\n    tasks.forEach(task => {\n      if (task.id === id) {\n        const index = tasks.findIndex(task => task.id === id);\n        this.setState({\n          tasks: tasks,\n          devTasks: [\n            ...this.state.devTasks,\n            {\n              id: Math.random() * this.state.devTasks.length,\n              name: tasks[index].name,\n              priority: tasks[index].priority,\n              passedTime: this.state.fullDate,\n              type: tasks[index].type,\n              taskColor: tasks[index].taskColor\n            }\n          ]\n        });\n\n        tasks.splice(index, 1);\n      }\n    });\n  };\n\n  handlePushDev = id => {\n    const tasks = [...this.state.devTasks];\n\n    tasks.forEach(task => {\n      if (task.id === id) {\n        const index = tasks.findIndex(task => task.id === id);\n\n        this.setState({\n          devTasks: tasks,\n          verifyTasks: [\n            ...this.state.verifyTasks,\n            {\n              id: Math.random() * this.state.verifyTasks.length,\n              name: tasks[index].name,\n              priority: tasks[index].priority,\n              passedTime: this.state.fullDate,\n              type: tasks[index].type,\n              taskColor: tasks[index].taskColor\n            }\n          ]\n        });\n        tasks.splice(index, 1);\n      }\n    });\n  };\n\n  handlePushVerify = id => {\n    const tasks = [...this.state.verifyTasks];\n\n    tasks.forEach(task => {\n      if (task.id === id) {\n        const index = tasks.findIndex(task => task.id === id);\n        this.setState({\n          verifyTasks: tasks,\n          done: [\n            ...this.state.done,\n            {\n              id: Math.random() * this.state.done.length,\n              name: tasks[index].name,\n              priority: tasks[index].priority,\n              doneAt: this.state.fullDate,\n              type: tasks[index].type,\n              taskColor: tasks[index].taskColor\n            }\n          ]\n        });\n        tasks.splice(index, 1);\n      }\n    });\n  };\n\n  sortToDoTasks = property => {\n    let sortOrder = 1;\n    if (property[0] === \"-\") {\n      sortOrder = -1;\n      property = property.substr(1);\n    }\n    return (a, b) => {\n      let result =\n        a[property] < b[property] ? -1 : a[property] > b[property] ? 1 : 0;\n      return result * sortOrder;\n    };\n  };\n\n  handleDeleteToDo = id => {\n    const tasks = [...this.state.tasks];\n    const index = tasks.findIndex(task => task.id === id);\n    tasks.splice(index, 1);\n    this.setState({\n      tasks\n    });\n  };\n\n  handleDeleteDone = id => {\n    const tasksDone = [...this.state.done];\n    const index = tasksDone.findIndex(task => task.id === id);\n    tasksDone.splice(index, 1);\n    this.setState({\n      done: tasksDone\n    });\n  };\n\n  handleDate = e => {\n    this.setState({\n      date: e.target.value\n    });\n  };\n\n  handleSelect = e => {\n    this.setState({\n      taskType: e.target.value\n    });\n\n    switch (e.target.value) {\n      case \"family\":\n        return this.setState({\n          taskColor: { backgroundColor: \"#57A1C4\" }\n        });\n      case \"home\":\n        return this.setState({\n          taskColor: { backgroundColor: \"#9370DB\" }\n        });\n      case \"work\":\n        return this.setState({\n          taskColor: { backgroundColor: \"#CBC8C8\" }\n        });\n      case \"car\":\n        return this.setState({\n          taskColor: { backgroundColor: \"#92C1FF\" }\n        });\n      case \"food\":\n        return this.setState({\n          taskColor: { backgroundColor: \"#68D384\" }\n        });\n      case \"school\":\n        return this.setState({\n          taskColor: { backgroundColor: \"#E5AE3A\" }\n        });\n      case \"others\":\n        return this.setState({\n          taskColor: { backgroundColor: \"#8F9A9F\" }\n        });\n      default:\n        return this.setState({\n          taskColor: { backgroundColor: \"black\" }\n        });\n    }\n  };\n\n  render() {\n    console.log(this.state.taskType);\n    console.log(this.state.taskColor);\n\n    const tasks = this.state.tasks.map(task => (\n      <Task\n        taskColor={task.taskColor}\n        taskType={task.type}\n        date={task.deadlineTask}\n        priority={task.priority}\n        key={task.id}\n        name={task.name}\n        delete={() => this.handleDeleteToDo(task.id)}\n        done={() => this.handlePushToDo(task.id)}\n      />\n    ));\n\n    const devTasks = this.state.devTasks.map(task => (\n      <DevTasks\n        taskColor={task.taskColor}\n        taskType={task.type}\n        date={task.passedTime}\n        priority={task.priority}\n        doneAt={task.doneAt}\n        key={task.id}\n        name={task.name}\n        done={() => this.handlePushDev(task.id)}\n      />\n    ));\n\n    const verifyTasks = this.state.verifyTasks.map(task => (\n      <VerifiedTasks\n        taskColor={task.taskColor}\n        taskType={task.type}\n        date={task.passedTime}\n        priority={task.priority}\n        doneAt={task.doneAt}\n        key={task.id}\n        name={task.name}\n        done={() => this.handlePushVerify(task.id)}\n      />\n    ));\n\n    const tasksDone = this.state.done.map(task => (\n      <TaskDone\n        taskColor={task.taskColor}\n        taskType={task.type}\n        date={task.doneAt}\n        priority={task.priority}\n        doneAt={task.doneAt}\n        key={task.id}\n        name={task.name}\n        deleteDone={() => this.handleDeleteDone(task.id)}\n      />\n    ));\n\n    return (\n      <div className=\"App\">\n        <div className=\"InputArea\">\n          <div className=\"inputField\">\n            <label htmlFor=\"inp\" className=\"inp\">\n              <input\n                id=\"inp\"\n                type=\"text\"\n                name=\"draft\"\n                value={this.state.draft}\n                onChange={this.handleInput}\n                maxLength=\"30\"\n                placeholder=\"&nbsp;\"\n              />\n              <span className=\"label\">Input task</span>\n              <span className=\"border\" />\n            </label>\n\n            <div className=\"squaredCheckbox\">\n              <label htmlFor=\"checkb\">\n                <input\n                  type=\"checkbox\"\n                  id=\"checkb\"\n                  checked={this.state.priority}\n                  onChange={this.handlePriority}\n                />\n                <label htmlFor=\"mark\" />\n                <i>High priority</i>\n              </label>\n            </div>\n\n            <div className=\"AddBtnContainer\">\n              <button\n                id=\"addBtn\"\n                className=\"btn btn-primary\"\n                onClick={this.handleAddTask}\n              >\n                Add ✚\n              </button>\n              <p style={{ color: \"red\" }}>\n                {this.state.AddActive && this.state.draft === \"\"\n                  ? `Fill task field firstly`\n                  : null}\n              </p>\n            </div>\n          </div>\n\n          <div className=\"selectBox\">\n            <label htmlFor=\"choice\">\n              <b>Task type: </b>\n              <select\n                style={this.state.taskColor}\n                value={this.state.taskType}\n                onChange={this.handleSelect}\n                id=\"choice\"\n              >\n                <option value=\"family\">Family</option>\n                <option value=\"home\">Home</option>\n                <option value=\"work\">Work</option>\n                <option value=\"car\">Car</option>\n                <option value=\"food\">Food</option>\n                <option value=\"school\">School</option>\n                <option value=\"others\">Others</option>\n              </select>\n            </label>\n          </div>\n\n          <div className=\"deadlineDate\">\n            <label htmlFor=\"date\">\n              <p>Deadline date: </p>\n              <input\n                id=\"date\"\n                type=\"date\"\n                value={this.state.date}\n                min={this.state.minimumDate}\n                max={this.state.maximumDate}\n                onChange={this.handleDate}\n              />\n            </label>\n          </div>\n        </div>\n        <hr />\n\n        <div className=\"row\" style={{ margin: 0 }}>\n          <div className=\"col-xl-3\" style={{ borderRight: \"2px solid black\" }}>\n            <div className=\"TasksToDoHeader\">\n              <h2>To do ({this.state.tasks.length})</h2>{\" \"}\n              <h6>\n                <i>(ordered by priority & task type)</i>\n              </h6>\n              <button\n                style={\n                  this.state.tasks.length > 0\n                    ? { visibility: \"visible\" }\n                    : { visibility: \"hidden\" }\n                }\n                id=\"tasks\"\n                className=\"btn btn-danger\"\n                onClick={this.handleClearAll}\n              >\n                Delete all\n              </button>\n              <h3\n                style={\n                  this.state.tasks.length > 0\n                    ? { display: \"none\" }\n                    : { display: \"block\", color: \"red\" }\n                }\n              >\n                <i>None tasks to be done !</i>\n              </h3>\n            </div>\n            <div className=\"TasksToDoContainers\">{tasks}</div>\n          </div>\n\n          <div className=\"col-xl-3\" style={{ borderRight: \"2px solid black\" }}>\n            <div className=\"TasksToDoHeader\">\n              <h2>Dev ({this.state.devTasks.length})</h2>{\" \"}\n              <h3\n                style={\n                  this.state.devTasks.length > 0\n                    ? { display: \"none\" }\n                    : { display: \"block\", color: \"red\" }\n                }\n              >\n                <i>None tasks to be developed !</i>\n              </h3>\n            </div>\n            <div className=\"TasksToDoContainers\">{devTasks}</div>\n          </div>\n\n          <div className=\"col-xl-3\" style={{ borderRight: \"2px solid black\" }}>\n            <div className=\"TasksToDoHeader\">\n              <h2>Test ({this.state.verifyTasks.length})</h2>{\" \"}\n              <h3\n                style={\n                  this.state.verifyTasks.length > 0\n                    ? { display: \"none\" }\n                    : { display: \"block\", color: \"red\" }\n                }\n              >\n                <i>None tasks to be verified !</i>\n              </h3>\n            </div>\n            <div className=\"TasksToDoContainers\">{verifyTasks}</div>\n          </div>\n\n          <div className=\"col-xl-3\">\n            <div className=\"TasksToDoHeader\">\n              <h2>Done ({this.state.done.length})</h2>{\" \"}\n              <button\n                style={\n                  this.state.done.length > 0\n                    ? { visibility: \"visible\" }\n                    : { visibility: \"hidden\" }\n                }\n                id=\"done\"\n                className=\"btn btn-danger\"\n                onClick={this.handleClearAll}\n              >\n                Delete all\n              </button>\n              <h3\n                style={\n                  this.state.done.length > 0\n                    ? { display: \"none\" }\n                    : { display: \"block\", color: \"red\" }\n                }\n              >\n                <i>None task is done !</i>\n              </h3>\n            </div>\n            <div className=\"TasksToDoContainers\">{tasksDone}</div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst Task = props => {\n  return (\n    <div>\n      <div className=\"singleTask\" style={props.taskColor}>\n        <div className=\"control-buttons\">\n          <button className=\"btn btn-success\" onClick={props.done}>\n            ✔\n          </button>\n          <button className=\"btn btn-danger\" onClick={props.delete}>\n            ✘\n          </button>\n        </div>\n        <p>\n          <i>{props.taskType}</i>\n        </p>\n        <h4 className={props.priority ? \"priority\" : \"standard\"}>\n          {props.priority ? props.name.toUpperCase() : props.name}\n          <br />\n        </h4>\n        <i> {props.date ? `deadline: ${props.date}` : props.date}</i>\n      </div>\n    </div>\n  );\n};\n\nconst DevTasks = props => {\n  return (\n    <div>\n      <div className=\"singleTask\" style={props.taskColor}>\n        <div className=\"control-buttons\">\n          <button className=\"btn btn-success\" onClick={props.done}>\n            ✔\n          </button>\n        </div>\n        <p>\n          <i>{props.taskType}</i>\n        </p>\n        <h4 className={props.priority ? \"priority\" : \"standard\"}>\n          {props.priority ? props.name.toUpperCase() : props.name}\n          <br />\n        </h4>\n        <i> {props.date ? `passed: ${props.date}` : props.date}</i>\n      </div>\n    </div>\n  );\n};\n\nconst VerifiedTasks = props => {\n  return (\n    <div>\n      <div className=\"singleTask\" style={props.taskColor}>\n        <div className=\"control-buttons\">\n          <button className=\"btn btn-success\" onClick={props.done}>\n            ✔\n          </button>\n        </div>\n        <p>\n          <i>{props.taskType}</i>\n        </p>\n        <h4 className={props.priority ? \"priority\" : \"standard\"}>\n          {props.priority ? props.name.toUpperCase() : props.name}\n          <br />\n        </h4>\n        <i> {props.date ? `passed: ${props.date}` : props.date}</i>\n      </div>\n    </div>\n  );\n};\n\nconst TaskDone = props => {\n  return (\n    <div>\n      <div className=\"singleTask\" style={props.taskColor}>\n        <div className=\"control-buttons\">\n          <button className=\"btn btn-danger\" onClick={props.deleteDone}>\n            ✘\n          </button>\n        </div>\n        <p>\n          <i>{props.taskType}</i>\n        </p>\n        <h4 className={props.priority ? \"priority\" : \"standard\"}>\n          {props.priority ? props.name.toUpperCase() : props.name}\n          <br />\n        </h4>\n        <i> {props.date ? `done: ${props.date}` : props.date}</i>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}